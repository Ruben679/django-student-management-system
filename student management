class Student:
    def __init__(self, student_id, name, age, grade):
        self.student_id = student_id
        self.name = name
        self.age = age
        self.grade = grade

    def __str__(self):
        return f"ID: {self.student_id}, Name: {self.name}, Age: {self.age}, Grade: {self.grade}"

class StudentManagementSystem:
    def __init__(self):
        self.students = []
        self.load_data()

    def load_data(self):
        try:
            with open("students.txt", "r") as file:
                lines = file.readlines()
                for line in lines:
                    student_id, name, age, grade = line.strip().split(",")
                    self.students.append(Student(student_id, name, int(age), grade))
        except FileNotFoundError:
            pass

    def save_data(self):
        with open("students.txt", "w") as file:
            for student in self.students:
                file.write(f"{student.student_id},{student.name},{student.age},{student.grade}\n")

    def add_student(self):
        student_id = input("Enter Student ID: ")
        name = input("Enter Student Name: ")
        age = int(input("Enter Student Age: "))
        grade = input("Enter Student Grade: ")
        student = Student(student_id, name, age, grade)
        self.students.append(student)
        self.save_data()

    def view_students(self):
        if not self.students:
            print("No students found.")
        else:
            for student in self.students:
                print(student)

    def search_student(self):
        student_id = input("Enter Student ID to search: ")
        found = False
        for student in self.students:
            if student.student_id == student_id:
                print(student)
                found = True
                break
        if not found:
            print("Student not found.")

    def delete_student(self):
        student_id = input("Enter Student ID to delete: ")
        found = False
        for student in self.students:
            if student.student_id == student_id:
                self.students.remove(student)
                self.save_data()
                print(f"Student with ID {student_id} deleted.")
                found = True
                break
        if not found:
            print("Student not found.")

    def update_student(self):
        student_id = input("Enter Student ID to update: ")
        found = False
        for student in self.students:
            if student.student_id == student_id:
                student.name = input(f"Enter new name for {student.name}: ")
                student.age = int(input(f"Enter new age for {student.age}: "))
                student.grade = input(f"Enter new grade for {student.grade}: ")
                self.save_data()
                print(f"Student with ID {student_id} updated.")
                found = True
                break
        if not found:
            print("Student not found.")

def main():
    system = StudentManagementSystem()

    while True:
        print("\nStudent Management System")
        print("1. Add Student")
        print("2. View Students")
        print("3. Search Student")
        print("4. Update Student")
        print("5. Delete Student")
        print("6. Exit")

        choice = input("Enter choice: ")

        if choice == "1":
            system.add_student()
        elif choice == "2":
            system.view_students()
        elif choice == "3":
            system.search_student()
        elif choice == "4":
            system.update_student()
        elif choice == "5":
            system.delete_student()
        elif choice == "6":
            break
        else:
            print("Invalid choice. Try again.")

if __name__ == "__main__":
    main()
